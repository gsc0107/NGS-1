The maximum depth of coverage is around 8091. Where is the bug hiding?

samtools assumes multiple bam files. To calculate the total coverage,
we have to iterate through all bam files.

n_plp[i]  is the number of covering reads for a position from the i-th BAM.
bam_mplp_auto(mplp, &tid, &pos, n_plp, plp) will return a n_plp.


macbook-pro:lec3 tianl$ gdb
GNU gdb 6.3.50-20050815 (Apple version gdb-1820) (Sat Jun 16 02:40:11 UTC 2012)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "x86_64-apple-darwin".
(gdb) file ~/samtools/samtools
Reading symbols for shared libraries .... done
Reading symbols from /Users/tianl/samtools/samtools...done.
(gdb) b bam_mplp_auto         
Ambiguous set command "b bam_mplp_auto": backtrace, breakpoint.
(gdb) run depth r12.bwa.sorted.bam
watch n_plp[0]

(gdb) b bam_plp_auto
(gdb) b bam_plp_next


**** Look here! ****
193  const bam_pileup1_t *bam_plp_next(bam_plp_t iter, int *_tid, int *_pos, int *_n_plp)
194	{
195		if (iter->error) { *_n_plp = -1; return 0; }
196		*_n_plp = 0;
197		if (iter->is_eof && iter->head->next == 0) return 0;
198		while (iter->is_eof || iter->max_tid > iter->tid || (iter->max_tid == iter->tid && iter->max_pos > iter->pos)) {
199			int n_plp = 0;
200			lbnode_t *p, *q;
201			// write iter->plp at iter->pos
202			iter->dummy->next = iter->head;
(gdb) p *iter
$40 = {
  mp = 0x100103cf0, 
  head = 0x100103d10, 
  tail = 0x100318040, 
  dummy = 0x100103d70, 
  tid = 0, 
  pos = 6, 
  max_tid = 0, 
  max_pos = 6, 
  is_eof = 0, 
  flag_mask = 1796, 
  max_plp = 8192, 
  error = 0, 
  maxcnt = 8000, 
  plp = 0x1000c8000, 
  b = 0x100103dd0, 
  func = 0x10002db20 <read_bam>, 
  data = 0x100103a10
}

???? what is iter->max_plp????     what is maxcnt (default=8000)?
bam_pileup.c:
                                if (n_plp == iter->max_plp) { // then double the capacity

There is a function  bam_plp_set_maxcnt which is never called?

I modified maxcnt to 18000 and things starts to getting right.

bam_plp_t bam_plp_init(bam_plp_auto_f func, void *data)
{
        bam_plp_t iter;
        iter = calloc(1, sizeof(struct __bam_plp_t));
        iter->mp = mp_init();
        iter->head = iter->tail = mp_alloc(iter->mp);
        iter->dummy = mp_alloc(iter->mp);
        iter->max_tid = iter->max_pos = -1;
        iter->flag_mask = BAM_DEF_MASK;
        iter->maxcnt = 18000;
        if (func) {
                iter->func = func;
                iter->data = data;
                iter->b = bam_init1();
        }
        return iter;
}


bam_plp_next
when is maxcnt actually checked?
bam_plp_push (which is called from bam_plp_auto):
if (iter->tid == b->core.tid && iter->pos == b->core.pos && iter->mp->cnt > iter->maxcnt) return 0;


The calling stack is:
bam_plp_auto -> bam_plp_next
             ->  bam_plp_push

